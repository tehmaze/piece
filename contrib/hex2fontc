#!/usr/bin/env python

import os
import sys


def convert(filename, stream=sys.stdout):
    fontname = os.path.splitext(os.path.basename(filename))[0]
    fontname = fontname.replace('-', '_').replace('.', '_')
    glyphs   = []
    comments = []
    h = 16
    w = 8
    with open(filename) as handle:
        for line in handle:
            line = line.rstrip()
            if line.startswith('# Height:'):
                h = int(line.split(': ')[1])
            elif line.startswith('# Width:'):
                w = int(line.split(': ')[1])
            elif line.startswith('#'):
                comments.append(line[1:].strip())
            else:
                glyphs.extend(line.split(':')[1].decode('hex'))

    l = len(glyphs)
    if comments:
        for comment in comments:
            stream.write('// {0}\n'.format(comment))
        stream.write('\n')
    stream.write('uint8_t piece_{0}_font_glyphs[{t}] = {{\n'.format(
        fontname,
        l=l,
        h=h,
        t=l * h,
    ))
    as_hex = lambda c: '0x%02x' % (ord(c),)
    last = (len(glyphs) // 12) * 12
    for i in range(0, len(glyphs), 12):
        stream.write('    {0}'.format(
            ', '.join(map(as_hex, glyphs[i:i + 12])),
        ))
        if i != last:
            stream.write(',')
        stream.write('\n')
    stream.write('};\n\n')
    stream.write('static piece_font piece_{0}_font = {{\n'.format(fontname))
    stream.write('    "{0}",\n'.format(fontname))
    stream.write('    {w},\n    {h},\n    {l},\n'.format(w=w, h=h, l=l))
    stream.write('    piece_{0}_font_glyphs,\n'.format(fontname))
    stream.write('    0,\n    NULL\n')
    stream.write('};\n\n')

    return fontname


def convert_to(sources, target):
    with open(target, 'w') as handle:
        handle.write('/* This file is generated, do not modify */\n\n')
        handle.write('/* Splint directives */\n/*@+charint@*/\n\n')
        handle.write('#include <stdint.h>\n')
        handle.write('#include <stdlib.h>\n\n')
        handle.write('#include "piece/font.h"\n')
        handle.write('#include "piece/util.h"\n\n')
        fontnames = []
        for source in sources:
            fontnames.append(convert(str(source), handle))
        fontnames.sort()

        handle.write('void piece_font_init(void) {\n')
        handle.write('    piece_fonts = piece_allocate(sizeof(piece_list));\n');
        handle.write('    piece_list_new(piece_fonts, piece_font_free_item);\n')
        for fontname in fontnames:
            handle.write('    piece_list_append(piece_fonts, &piece_{0}_font);\n'
                         .format(fontname))
        handle.write('   piece_font_init_alias();\n')
        handle.write('}\n\n')


def run():
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('-o', '--output', required=True)
    parser.add_argument('source', nargs='+')

    args = parser.parse_args()
    convert_to(args.source, args.output)


if __name__ == '__main__':
    sys.exit(run())
